# Product Requirements Document (PRD): Recruiter Dashboard – Create Job Page

## Overview

Add a new “Create Job” page to the recruiter-dashboard app, allowing users to either:
- Create a new job from scratch (with AI assistance)
- Import and edit an existing job (placeholder for now)

## User Stories

### 1. Create Job from Scratch
- As a recruiter, I can navigate to the “Create Job” page.
- I see two options: “Create from Scratch” and “Import Existing Job.”
- If I choose “Create from Scratch,” I am prompted to enter a one-line outline/summary of the job I want to create.
- Upon submitting the outline, the frontend sends it to a FastAPI backend endpoint.
- The backend starts a CrewAI crew in the background to generate a full job posting based on the outline.
- The backend immediately returns a `kickoff_id` to the frontend.
- The frontend uses this `kickoff_id` to poll a separate REST endpoint for updates on the crew execution status and results.
- The crew must:
  - Intelligently parse the outline to extract structured job attributes (e.g., “ICU nurse posting with 5 vacancies” → role: ICU nurse, vacancies: 5).
  - Generate the job description using three different agents, as set up in `crews/create_job_crew`.
  - Output a Pydantic object that matches the current GraphQL `CreateJobInput` type.
- When the job is generated, the backend sends the job data (JSON) to the frontend via the polling endpoint.
- The frontend displays a job creation form, pre-filled with the generated job data.
- I can edit any field in the form and click “Update Job” to save it.
- The form submission triggers an existing GraphQL mutation to save the job to the database.

### 2. Import Existing Job
- If I choose “Import Existing Job,” I see a placeholder screen (to be implemented in the future).

## Functional Requirements

### Frontend
- Add a new page: `/create-job`
- Display two options: “Create from Scratch” and “Import Existing Job”
- For “Create from Scratch”:
  - Prompt for a one-line job outline
  - Send outline to FastAPI endpoint (e.g., `POST /api/ai/generate-job`)
  - Receive a `kickoff_id` in the response
  - Poll a separate REST endpoint (e.g., `GET /api/ai/generate-job/status/{kickoff_id}`) for updates/results
  - Show loading state while waiting for job generation
  - When job data is received, display a job creation form pre-filled with the generated data
  - Allow user to edit fields and submit via “Update Job” button
  - On submit, call existing GraphQL mutation to save the job
- For “Import Existing Job”:
  - Show a placeholder screen

### Backend
- FastAPI endpoint to receive job outline and start CrewAI crew
  - Endpoint: `POST /api/ai/generate-job`
  - Accepts: `{ outline: string }`
  - Starts CrewAI crew in the background to generate job posting
  - Immediately returns a `kickoff_id` to the client
  - Expose a polling endpoint: `GET /api/ai/generate-job/status/{kickoff_id}`
    - Returns the current status and, when ready, the generated job data (as a Pydantic object matching the GraphQL `CreateJobInput` type)
  - The crew must:
    - Parse the outline to extract structured job attributes (e.g., role, vacancies, etc.)
    - Generate the job description using three different agents (as in `crews/create_job_crew`)
    - Output a Pydantic object that matches the current GraphQL `CreateJobInput` type

### Integration
- The frontend must handle asynchronous job generation using the `kickoff_id` and polling endpoint
- The backend must notify the frontend of job readiness via the polling endpoint
- The job creation form must use the existing GraphQL mutation for saving jobs

## Non-Functional Requirements
- Use TypeScript, Next.js, React, Relay, and TailwindCSS on the frontend
- Use FastAPI, CrewAI, and Python on the backend
- Ensure responsive design and good UX for loading/error states
- Placeholder for “Import Existing Job” (no backend logic yet)

## Out of Scope
- Actual implementation of the “Import Existing Job” feature (just a placeholder for now)
- Changes to the existing GraphQL mutation

## Acceptance Criteria
- Recruiter can create a job from scratch using AI assistance and save it after editing
- CrewAI crew parses the outline and generates a Pydantic object matching the GraphQL `CreateJobInput` type
- Job description is generated using three agents as in `crews/create_job_crew`
- Recruiter can see a placeholder for importing an existing job
- All backend and frontend integration points work as described, including polling with `kickoff_id`
