directive @isAuthenticated on FIELD_DEFINITION

directive @requiresSudoMode on FIELD_DEFINITION

"""An account."""
type Account implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """The full name of the account."""
  fullName: String!

  """The email of the account."""
  email: String!

  """When the account was last updated."""
  updatedAt: DateTime

  """The authentication providers supported by the account."""
  authProviders: [AuthProvider!]!

  """Whether the account has 2FA enabled."""
  has2faEnabled: Boolean!

  """The account's profile."""
  profile: ProfilePayload!

  """The account's avatar URL."""
  avatarUrl(
    """The size of the avatar."""
    size: Int! = 80
  ): String!

  """When the user's sudo mode grant expires at."""
  sudoModeExpiresAt: DateTime

  """The organizations the account is in."""
  organizations(
    """Returns items before the given cursor."""
    before: ID = null

    """Returns items after the given cursor."""
    after: ID = null

    """How many items to return after the cursor?"""
    first: Int = null

    """How many items to return before the cursor?"""
    last: Int = null
  ): OrganizationConnection!

  """The sessions for the account."""
  sessions(
    """Returns items before the given cursor."""
    before: ID = null

    """Returns items after the given cursor."""
    after: ID = null

    """How many items to return after the cursor?"""
    first: Int = null

    """How many items to return before the cursor?"""
    last: Int = null
  ): SessionConnection!

  """The webauthn credentials for the account."""
  webAuthnCredentials(
    """Returns items before the given cursor."""
    before: ID = null

    """Returns items after the given cursor."""
    after: ID = null

    """How many items to return after the cursor?"""
    first: Int = null

    """How many items to return before the cursor?"""
    last: Int = null
  ): WebAuthnCredentialConnection!
}

"""Used when the account is not found."""
type AccountNotFoundError implements Error {
  """Human readable error message."""
  message: String!
}

type Address {
  """Address line 1."""
  line1: String

  """Address line 2."""
  line2: String

  """City."""
  city: String

  """State."""
  state: String

  """Country."""
  country: String

  """Pincode."""
  pincode: String
}

input AddressInput {
  """Address line 1."""
  line1: String

  """Address line 2."""
  line2: String

  """City."""
  city: String

  """State."""
  state: String

  """Country."""
  country: String

  """Pincode."""
  pincode: String
}

"""The authentication provider."""
enum AuthProvider {
  PASSWORD
  WEBAUTHN_CREDENTIAL
  OAUTH_GOOGLE
}

"""
The payload for creating a presigned URL for uploading the organization logo.
"""
type CreateOrganizationLogoPresignedURLPayload {
  """The presigned URL for uploading the organization logo."""
  presignedUrl: String!
}

"""The create organization payload."""
union CreateOrganizationPayload = Organization | OrganizationSlugInUseError

"""The create webauthn credential payload."""
union CreateWebAuthnCredentialPayload = CreateWebAuthnCredentialSuccess | InvalidPasskeyRegistrationCredentialError

"""Create webauthn credential success."""
type CreateWebAuthnCredentialSuccess {
  """The created webauthn credential edge."""
  webAuthnCredentialEdge: WebAuthnCredentialEdge!
}

"""The currency of the amount."""
enum Currency {
  INR
}

"""The current job details."""
type CurrentJob {
  """The current job title."""
  currentTitle: String!

  """The current organization."""
  currentOrganization: String

  """The current salary."""
  currentSalary: Float
}

"""Date (isoformat)"""
scalar Date

"""Date with time (isoformat)"""
scalar DateTime

"""The delete other sessions payload."""
type DeleteOtherSessionsPayload {
  """Deleted session IDs."""
  deletedSessionIds: [ID!]!
}

"""The delete session payload."""
union DeleteSessionPayload = DeleteSessionSuccess | SessionNotFoundError

"""Delete session success."""
type DeleteSessionSuccess {
  """The Deleted session edge."""
  sessionEdge: SessionEdge!
}

"""The delete webauthn credential payload."""
union DeleteWebAuthnCredentialPayload = DeleteWebAuthnCredentialSuccess | WebAuthnCredentialNotFoundError | InsufficientAuthProvidersError

"""Delete webauthn credential success."""
type DeleteWebAuthnCredentialSuccess {
  """The Deleted webauthn credential edge."""
  webAuthnCredentialEdge: WebAuthnCredentialEdge!
}

"""The disable account 2FA payload."""
union DisableAccount2FAPayload = Account | TwoFactorAuthenticationNotEnabledError

"""Used when the email address is in use."""
type EmailInUseError implements Error {
  """Human readable error message."""
  message: String!
}

"""Used when the email verification token cooldown is active."""
type EmailVerificationTokenCooldownError implements Error {
  """Human readable error message."""
  message: String!
  remainingSeconds: Int!
}

"""Human readable error."""
interface Error {
  """Human readable error message."""
  message: String!
}

"""Gender type."""
enum GenderType {
  MALE
  FEMALE
  OTHER
}

"""The generate 2FA recovery codes payload."""
union Generate2FARecoveryCodesPayload = Generate2FARecoveryCodesSuccess | TwoFactorAuthenticationNotEnabledError

"""Generate 2FA recovery codes success."""
type Generate2FARecoveryCodesSuccess {
  """The generated 2FA recovery codes."""
  recoveryCodes: [String!]!
}

"""The generate account 2FA OTP URI payload."""
union GenerateAccount2FAChallengePayload = GenerateAccount2FAChallengeSuccess

"""Generate account 2FA Challenge success."""
type GenerateAccount2FAChallengeSuccess {
  """The generated 2FA OTP URI."""
  otpUri: String!

  """The generated 2FA secret."""
  secret: String!
}

"""The generate authentication options payload."""
union GenerateAuthenticationOptionsPayload = GenerateAuthenticationOptionsSuccess | InvalidRecaptchaTokenError

"""Generate authentication options success."""
type GenerateAuthenticationOptionsSuccess {
  """Passkey authentication options."""
  authenticationOptions: JSON!
}

"""The generate passkey creation options payload."""
union GeneratePasskeyCreationOptionsPayload = GeneratePasskeyCreationOptionsSuccess

"""Generate passkey creation options success."""
type GeneratePasskeyCreationOptionsSuccess {
  """Passkey registration options for new passkey creation."""
  registrationOptions: JSON!
}

"""The generate passkey registration options payload."""
union GeneratePasskeyRegistrationOptionsPayload = GeneratePasskeyRegistrationOptionsSuccess | InvalidRecaptchaTokenError | EmailInUseError

"""Generate passkey registration options success."""
type GeneratePasskeyRegistrationOptionsSuccess {
  """Passkey registration options."""
  registrationOptions: JSON!
}

"""Used when at least one authentication provider must be enabled."""
type InsufficientAuthProvidersError implements Error {
  """Human readable error message."""
  message: String!
}

"""Used when an invalid authentication provider is used."""
type InvalidAuthenticationProviderError implements Error {
  """Human readable error message."""
  message: String!

  """Available authentication providers for the account."""
  availableProviders: [AuthProvider!]!
}

"""Used when invalid credentials are provided."""
type InvalidCredentialsError implements Error {
  """Human readable error message."""
  message: String!
}

"""Used when an invalid email address is provided."""
type InvalidEmailError implements Error {
  """Human readable error message."""
  message: String!
}

"""Used when an invalid email verification token is provided."""
type InvalidEmailVerificationTokenError implements Error {
  """Human readable error message."""
  message: String!
}

"""Used when an invalid passkey authentication credential is provided."""
type InvalidPasskeyAuthenticationCredentialError implements Error {
  """Human readable error message."""
  message: String!
}

"""Used when an invalid passkey registration credential is provided."""
type InvalidPasskeyRegistrationCredentialError implements Error {
  """Human readable error message."""
  message: String!
}

"""Used when an invalid password reset token is provided."""
type InvalidPasswordResetTokenError implements Error {
  """Human readable error message."""
  message: String!
}

"""Used when an invalid recaptcha token is provided."""
type InvalidRecaptchaTokenError implements Error {
  """Human readable error message."""
  message: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")

"""A job posting."""
type Job implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """The title of the job."""
  title: String!

  """The slug of the job."""
  slug: String!

  """The description of the job."""
  description: String

  """The category of the job."""
  category: String!

  """The type of the job."""
  type: JobType!

  """The work mode of the job."""
  workMode: WorkMode!

  """The address of the job."""
  address: Address!

  """The application link for the job."""
  application: String!

  """The skills required for the job."""
  skills: [String!]!

  """The currency of the salary."""
  currency: Currency!

  """Whether the job has a salary range."""
  hasSalaryRange: Boolean!

  """The minimum salary of the job."""
  minSalary: Int

  """The maximum salary of the job."""
  maxSalary: Int

  """Whether the job has an experience range."""
  hasExperienceRange: Boolean!

  """The minimum experience required for the job."""
  minExperience: Int

  """The maximum experience required for the job."""
  maxExperience: Int

  """When the job was last updated at."""
  updatedAt: DateTime!

  """The expiry time of the job."""
  expiresAt: DateTime

  """When the job was created at."""
  createdAt: DateTime!

  """Whether the job is saved by the current user."""
  isSaved: Boolean!

  """The organization of the job."""
  organization: Organization
}

type JobConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [JobEdge!]!
}

type JobEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Job!
}

"""Used when the job is not found."""
type JobNotFoundError implements Error {
  """Human readable error message."""
  message: String!
}

"""The job payload."""
union JobPayload = Job | JobNotFoundError

"""The type of job."""
enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
}

"""The language details."""
type Language {
  """The name of the language."""
  name: String!

  """The proficiency level of the language."""
  proficiency: String!
}

"""The language details input."""
input LanguageInput {
  """The name of the language."""
  name: String!

  """The proficiency level of the language."""
  proficiency: String!
}

"""The login with passkey payload."""
union LoginWithPasskeyPayload = Account | InvalidPasskeyAuthenticationCredentialError | InvalidRecaptchaTokenError | WebAuthnChallengeNotFoundError

"""The login with password payload."""
union LoginWithPasswordPayload = Account | InvalidCredentialsError | InvalidRecaptchaTokenError | InvalidAuthenticationProviderError | TwoFactorAuthenticationRequiredError

"""The logout payload."""
type LogoutPayload {
  """Human readable success message."""
  message: String!
}

"""Marital status type."""
enum MaritalStatusType {
  MARRIED
  SINGLE
}

type Mutation {
  """Request an email verification token."""
  requestEmailVerificationToken(
    """The email to request an email verification token for."""
    email: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): RequestEmailVerificationTokenPayload!

  """Verify an email."""
  verifyEmail(
    """The email to request an email verification token for."""
    email: String!

    """The email verification token."""
    emailVerificationToken: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): VerifyEmailPayload!

  """Register a new user with a password."""
  registerWithPassword(
    """The email of the new user."""
    email: String!

    """The email verification token."""
    emailVerificationToken: String!

    """The password of the new user."""
    password: String!

    """The full name of the new user."""
    fullName: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): RegisterWithPasswordPayload!

  """Generate registration options for registering via a passkey."""
  generatePasskeyRegistrationOptions(
    """The email of the new user."""
    email: String!

    """The full name of the new user."""
    fullName: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): GeneratePasskeyRegistrationOptionsPayload!

  """Register a new user with a passkey."""
  registerWithPasskey(
    """The email of the new user."""
    email: String!

    """The email verification token."""
    emailVerificationToken: String!

    """The passkey registration response of the new user."""
    passkeyRegistrationResponse: JSON!

    """The nickname of the passkey."""
    passkeyNickname: String!

    """The full name of the new user."""
    fullName: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): RegisterWithPasskeyPayload!

  """Generate authentication options."""
  generateAuthenticationOptions(
    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): GenerateAuthenticationOptionsPayload!

  """Generate reauthentication options (for sudo mode requests)."""
  generateReauthenticationOptions(
    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): GenerateAuthenticationOptionsPayload!

  """Log in a user with a passkey."""
  loginWithPasskey(
    """The authentication response of the user."""
    authenticationResponse: JSON!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): LoginWithPasskeyPayload!

  """Log in a user with email and password."""
  loginWithPassword(
    """The email of the user."""
    email: String!

    """The password of the user."""
    password: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): LoginWithPasswordPayload!

  """Log out the current user."""
  logout: LogoutPayload! @isAuthenticated

  """Request a password reset."""
  requestPasswordReset(
    """The email of the existing user."""
    email: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): RequestPasswordResetPayload!

  """Verify a 2FA challenge for password reset using an authenticator app."""
  verify2faPasswordResetWithAuthenticator(
    """The email of the existing user."""
    email: String!

    """The password reset token."""
    passwordResetToken: String!

    """The 2FA token to verify password reset."""
    twoFactorToken: String!
  ): Verify2FAPasswordResetWithAuthenticatorPayload!

  """Verify a 2FA challenge for password reset using a passkey."""
  verify2faPasswordResetWithPasskey(
    """The email of the existing user."""
    email: String!

    """The password reset token."""
    passwordResetToken: String!

    """The passkey authentication response to verify password reset."""
    authenticationResponse: JSON!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): Verify2FAPasswordResetWithPasskeyPayload!

  """Reset a user's password."""
  resetPassword(
    """The email of the existing user."""
    email: String!

    """The password reset token."""
    passwordResetToken: String!

    """The new password."""
    newPassword: String!
  ): ResetPasswordPayload!

  """Delete other sessions of the viewer than the current one."""
  deleteOtherSessions: DeleteOtherSessionsPayload! @isAuthenticated @requiresSudoMode

  """Delete session by ID."""
  deleteSession(
    """The ID of the session to delete."""
    sessionId: ID!
  ): DeleteSessionPayload! @isAuthenticated @requiresSudoMode

  """Delete webauthn credential by ID."""
  deleteWebAuthnCredential(
    """The ID of the Webauthn credential to delete."""
    webAuthnCredentialId: ID!
  ): DeleteWebAuthnCredentialPayload! @isAuthenticated @requiresSudoMode

  """Delete webauthn credential by ID."""
  updateWebAuthnCredential(
    """The ID of the Webauthn credential to update."""
    webAuthnCredentialId: ID!

    """The nickname of the passkey."""
    nickname: String!
  ): UpdateWebAuthnCredentialPayload! @isAuthenticated

  """Generate registration options for adding a webauthn credential."""
  generateWebAuthnCredentialCreationOptions: GeneratePasskeyCreationOptionsPayload! @isAuthenticated @requiresSudoMode

  """Create a new webauthn credential for the current user."""
  createWebAuthnCredential(
    """The passkey registration response."""
    passkeyRegistrationResponse: JSON!

    """The nickname of the passkey."""
    nickname: String!
  ): CreateWebAuthnCredentialPayload! @isAuthenticated @requiresSudoMode

  """Request a sudo mode grant for the current user using a passkey."""
  requestSudoModeWithPasskey(
    """The authentication response of the user."""
    authenticationResponse: JSON!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): RequestSudoModeWithPasskeyPayload! @isAuthenticated

  """Request a sudo mode grant for the current user using a password."""
  requestSudoModeWithPassword(
    """The password of the user."""
    password: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): RequestSudoModeWithPasswordPayload! @isAuthenticated

  """Request a sudo mode grant for the current user using 2FA."""
  requestSudoModeWith2fa(
    """The 2FA token of the user."""
    twoFactorToken: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): RequestSudoModeWith2FAPayload! @isAuthenticated

  """Set two factor authentication."""
  setAccount2fa(
    """The 2FA token."""
    token: String!
  ): SetAccount2FAPayload! @isAuthenticated @requiresSudoMode

  """Disable two factor authentication."""
  disableAccount2fa: DisableAccount2FAPayload! @isAuthenticated @requiresSudoMode

  """Generate an account 2FA challenge."""
  generateAccount2faChallenge: GenerateAccount2FAChallengePayload! @isAuthenticated @requiresSudoMode

  """Verify Account 2FA challenge."""
  verify2faChallenge(
    """The 2FA token."""
    token: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): VerifyAccount2FATokenPayload!

  """Verify Account 2FA recovery code."""
  verify2faRecoveryCode(
    """The 2FA token."""
    token: String!

    """The recaptcha token to verify the user request."""
    recaptchaToken: String!
  ): VerifyAccount2FATokenPayload!

  """Generate 2FA recovery codes for the current user."""
  generate2faRecoveryCodes: Generate2FARecoveryCodesPayload! @isAuthenticated @requiresSudoMode

  """Save a job."""
  saveJob(
    """The ID of the job to save."""
    jobId: ID!
  ): SaveJobPayload! @isAuthenticated

  """Save a job."""
  unsaveJob(
    """The ID of the job to unsave."""
    jobId: ID!
  ): UnsaveJobPayload! @isAuthenticated

  """Update the current user's profile personal details."""
  updateProfilePersonalDetails(address: AddressInput!, gender: GenderType = null, dateOfBirth: Date = null, maritalStatus: MaritalStatusType = null, category: String = null): UpdateProfilePayload! @isAuthenticated

  """Update the current user's profile languages."""
  updateProfileLanguages(languages: [LanguageInput!]!): UpdateProfilePayload! @isAuthenticated

  """Update the current user's account."""
  updateAccount(fullName: String!): UpdateAccountPayload! @isAuthenticated

  """Create an organization."""
  createOrganization(
    """The full name of the organization."""
    fullName: String!

    """The slug of the organization."""
    slug: String!

    """The website of the organization."""
    website: String = null

    """The description of the organization."""
    description: String = null
  ): CreateOrganizationPayload! @isAuthenticated

  """Create an organization logo presigned URL."""
  createOrganizationLogoPresignedUrl: CreateOrganizationLogoPresignedURLPayload! @isAuthenticated
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: ID!
}

type NotAuthenticatedError implements Error {
  """Human readable error message."""
  message: String!
}

"""An organization owned by an account."""
type Organization implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """The name of the organization."""
  name: String!

  """The slug of the organization."""
  slug: String!

  """The description of the organization."""
  description: String

  """The address of the organization."""
  address: Address!

  """The contact email of the organization."""
  email: String

  """The website of the organization."""
  website: String

  """The logo URL of the organization."""
  logoUrl: String!

  """Whether the current user is an admin in this organization."""
  isAdmin: Boolean!

  """Whether the current user is an member in this organization."""
  isMember: Boolean!

  """The jobs posted in the organization."""
  jobs(
    """Returns items before the given cursor."""
    before: ID = null

    """Returns items after the given cursor."""
    after: ID = null

    """How many items to return after the cursor?"""
    first: Int = null

    """How many items to return before the cursor?"""
    last: Int = null
  ): JobConnection!

  """The members of the organization."""
  members(
    """Returns items before the given cursor."""
    before: ID = null

    """Returns items after the given cursor."""
    after: ID = null

    """How many items to return after the cursor?"""
    first: Int = null

    """How many items to return before the cursor?"""
    last: Int = null
  ): OrganizationMemberConnection!
}

type OrganizationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrganizationEdge!]!
}

type OrganizationEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Organization!
}

type OrganizationMemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrganizationMemberEdge!]!
}

type OrganizationMemberEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Account!

  """The role of the user in the organization."""
  role: String!

  """When the user joined the organization."""
  createdAt: DateTime!
}

"""Used when the organization is not found."""
type OrganizationNotFoundError implements Error {
  """Human readable error message."""
  message: String!
}

"""The organization payload."""
union OrganizationPayload = Organization | OrganizationNotFoundError

"""Used when a organization with the slug already exists."""
type OrganizationSlugInUseError implements Error {
  """Human readable error message."""
  message: String!
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Used when the password is not strong enough."""
type PasswordNotStrongError implements Error {
  """Human readable error message."""
  message: String!
}

"""A password reset token."""
type PasswordResetToken implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """Email address of the password reset token's account."""
  email: String!

  """Available 2FA providers for the password reset token's account."""
  twoFactorProviders: [TwoFactorProvider!]!

  """Whether the password reset token needs 2FA to be used."""
  needs2fa: Boolean!
}

"""Used when the password reset token cooldown is active."""
type PasswordResetTokenCooldownError implements Error {
  """Human readable error message."""
  message: String!
  remainingSeconds: Int!
}

"""Used when the password reset token is not found."""
type PasswordResetTokenNotFoundError implements Error {
  """Human readable error message."""
  message: String!
}

"""The password reset token payload."""
union PasswordResetTokenPayload = PasswordResetToken | PasswordResetTokenNotFoundError

"""An account's profile."""
type Profile implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """The gender of the profile's user."""
  gender: GenderType

  """The date of birth of the profile's user."""
  dateOfBirth: Date!

  """The address of the profile's user."""
  address: Address!

  """The marital status of the profile's user."""
  maritalStatus: MaritalStatusType

  """The category of the profile's user."""
  category: String

  """The list of languages spoken by the profile's user."""
  languages: [Language!]!

  """Total job experience (in years) of the profile's user."""
  totalJobExperience: Float

  """The current job of the profile's user."""
  currentJob: CurrentJob

  """When the profile was created."""
  createdAt: DateTime!
}

"""Used when the profile is not found."""
type ProfileNotFoundError implements Error {
  """Human readable error message."""
  message: String!
}

"""The profile payload."""
union ProfilePayload = Profile | ProfileNotFoundError

type Query {
  """Get the current user."""
  viewer: ViewerPayload!

  """Get a password reset token."""
  passwordResetToken(
    """Generated password reset token"""
    resetToken: String!

    """The email the password reset token belongs to."""
    email: String!
  ): PasswordResetTokenPayload!
  node(
    """The ID of the object."""
    id: ID!
  ): Node

  """Get all jobs available."""
  jobs(
    """Search term"""
    searchTerm: String = null

    """Returns items before the given cursor."""
    before: ID = null

    """Returns items after the given cursor."""
    after: ID = null

    """How many items to return after the cursor?"""
    first: Int = null

    """How many items to return before the cursor?"""
    last: Int = null
  ): JobConnection!

  """Get job by ID."""
  job(
    """Slug of the job"""
    slug: String!
  ): JobPayload!

  """Get all saved jobs for the current user."""
  savedJobs(
    """Returns items before the given cursor."""
    before: ID = null

    """Returns items after the given cursor."""
    after: ID = null

    """How many items to return after the cursor?"""
    first: Int = null

    """How many items to return before the cursor?"""
    last: Int = null
  ): SavedJobConnection! @isAuthenticated

  """Get organization by slug."""
  organization(
    """Slug of the organization"""
    slug: String!
  ): OrganizationPayload!
}

"""The register with passkey payload."""
union RegisterWithPasskeyPayload = Account | EmailInUseError | InvalidEmailVerificationTokenError | InvalidRecaptchaTokenError | InvalidPasskeyRegistrationCredentialError

"""The register with password payload."""
union RegisterWithPasswordPayload = Account | EmailInUseError | InvalidEmailVerificationTokenError | InvalidRecaptchaTokenError | PasswordNotStrongError

"""Request email verification success."""
type RequestEmailVerificationSuccess {
  """Human readable error message."""
  message: String!

  """Remaining seconds before requesting another email verification token."""
  remainingSeconds: Int!
}

"""The request email verification token payload."""
union RequestEmailVerificationTokenPayload = RequestEmailVerificationSuccess | EmailInUseError | EmailVerificationTokenCooldownError | InvalidRecaptchaTokenError | InvalidEmailError

"""The request password reset payload."""
union RequestPasswordResetPayload = RequestPasswordResetSuccess | InvalidRecaptchaTokenError | PasswordResetTokenCooldownError

"""Request password reset success."""
type RequestPasswordResetSuccess {
  """Human readable success message."""
  message: String!
}

"""The request sudo mode with 2FA payload."""
union RequestSudoModeWith2FAPayload = Account | InvalidCredentialsError | InvalidRecaptchaTokenError | TwoFactorAuthenticationNotEnabledError

"""The request sudo mode with passkey payload."""
union RequestSudoModeWithPasskeyPayload = Account | InvalidPasskeyAuthenticationCredentialError | InvalidRecaptchaTokenError | WebAuthnChallengeNotFoundError

"""The request sudo mode with password payload."""
union RequestSudoModeWithPasswordPayload = Account | InvalidCredentialsError | InvalidRecaptchaTokenError | InvalidAuthenticationProviderError

"""The reset password payload."""
union ResetPasswordPayload = Account | InvalidPasswordResetTokenError | PasswordNotStrongError | TwoFactorAuthenticationChallengeNotFoundError

"""The save job payload."""
union SaveJobPayload = SaveJobSuccess | JobNotFoundError

"""Save job success."""
type SaveJobSuccess {
  """The edge of the saved job."""
  savedJobEdge: SavedJobEdge!
}

type SavedJobConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SavedJobEdge!]!
}

type SavedJobEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Job!

  """When the job was saved at by the current user."""
  savedAt: DateTime!
}

"""Used when a saved job is not found."""
type SavedJobNotFoundError implements Error {
  """Human readable error message."""
  message: String!
}

"""An account's session."""
type Session implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """User agent of the session."""
  userAgent: String!

  """IP address of the session."""
  ipAddress: String!

  """When the session was created."""
  createdAt: DateTime!

  """Whether the session is the current account's session."""
  isCurrentSession: Boolean!
}

type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge!]!
}

type SessionEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Session!
}

"""Used when the session is not found."""
type SessionNotFoundError implements Error {
  """Human readable error message."""
  message: String!
}

"""The set account 2FA payload."""
union SetAccount2FAPayload = SetAccount2FASuccess | InvalidCredentialsError | TwoFactorAuthenticationChallengeNotFoundError

"""Set account 2FA success."""
type SetAccount2FASuccess {
  """The account with 2FA enabled."""
  account: Account!

  """The recovery codes for the account."""
  recoveryCodes: [String!]!
}

"""Used when the 2FA challenge is not found."""
type TwoFactorAuthenticationChallengeNotFoundError implements Error {
  """Human readable error message."""
  message: String!
}

"""Used when 2FA is not enabled for the account."""
type TwoFactorAuthenticationNotEnabledError implements Error {
  """Human readable error message."""
  message: String!
}

"""Used when 2FA is required."""
type TwoFactorAuthenticationRequiredError implements Error {
  """Human readable error message."""
  message: String!
}

"""The 2fA provider."""
enum TwoFactorProvider {
  WEBAUTHN_CREDENTIAL
  AUTHENTICATOR
}

"""The unsave job payload."""
union UnsaveJobPayload = UnsaveJobSuccess | SavedJobNotFoundError

"""Unsave job success."""
type UnsaveJobSuccess {
  """The edge of the unsaved job."""
  savedJobEdge: SavedJobEdge!
}

"""The update account payload."""
union UpdateAccountPayload = Account | AccountNotFoundError

"""The update profile payload."""
union UpdateProfilePayload = Account

"""The update webauthn credential payload."""
union UpdateWebAuthnCredentialPayload = WebAuthnCredential | WebAuthnCredentialNotFoundError

"""The verify 2FA password reset with authenticator payload."""
union Verify2FAPasswordResetWithAuthenticatorPayload = PasswordResetToken | InvalidCredentialsError | TwoFactorAuthenticationNotEnabledError | InvalidPasswordResetTokenError | InvalidRecaptchaTokenError

"""The verify 2FA password reset with passkey payload."""
union Verify2FAPasswordResetWithPasskeyPayload = PasswordResetToken | InvalidPasskeyAuthenticationCredentialError | TwoFactorAuthenticationNotEnabledError | InvalidPasswordResetTokenError | InvalidRecaptchaTokenError | WebAuthnChallengeNotFoundError

"""The verify account 2FA token payload."""
union VerifyAccount2FATokenPayload = Account | InvalidCredentialsError | TwoFactorAuthenticationNotEnabledError | TwoFactorAuthenticationChallengeNotFoundError | InvalidRecaptchaTokenError

"""The verify email payload."""
union VerifyEmailPayload = VerifyEmailSuccess | InvalidRecaptchaTokenError | InvalidEmailVerificationTokenError | EmailInUseError

"""Verify email success."""
type VerifyEmailSuccess {
  """Human readable success message."""
  message: String!
}

"""The viewer payload."""
union ViewerPayload = Account | NotAuthenticatedError

"""Used when the WebAuthn challenge is not found."""
type WebAuthnChallengeNotFoundError implements Error {
  """Human readable error message."""
  message: String!
}

"""A WebAuthn Credential belonging to an account."""
type WebAuthnCredential implements Node {
  """The Globally Unique ID of this object"""
  id: ID!

  """Nickname of the webauthn credential."""
  nickname: String!

  """When the webauthn credential was created."""
  createdAt: DateTime!
}

type WebAuthnCredentialConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebAuthnCredentialEdge!]!
}

type WebAuthnCredentialEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: WebAuthnCredential!
}

"""Used when the webauthn credential is not found."""
type WebAuthnCredentialNotFoundError implements Error {
  """Human readable error message."""
  message: String!
}

"""The work mode of the job."""
enum WorkMode {
  REMOTE
  HYBRID
  OFFICE
}
