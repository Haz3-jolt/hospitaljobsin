type Account implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  email: String!
  hasOnboarded: Boolean!
  updatedAt: DateTime
}

type Address {
  line1: String
  line2: String
  city: String!
  state: String!
  country: String!
  pincode: String
}

type Company implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  name: String!
  description: String!
  address: Address!
  phone: String!
  website: String!
  email: String!
  logoUrl: String
}

enum Currency {
  INR
}

"""Date with time (isoformat)"""
scalar DateTime

type EmailInUseError implements Error {
  message: String!
}

interface Error {
  message: String!
}

type InvalidCredentialsError implements Error {
  message: String!
}

type Job implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  title: String!
  description: String
  category: String!
  type: JobType!
  workMode: WorkMode!
  address: Address!
  application: String!
  skills: [String!]!
  currency: Currency!
  hasSalaryRange: Boolean!
  minSalary: Int
  maxSalary: Int
  hasExperienceRange: Boolean!
  minExperience: Int
  maxExperience: Int
  updatedAt: DateTime!
  expiresAt: DateTime
  createdAt: DateTime!
  company: Company
}

type JobConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [JobEdge!]!
}

"""An edge in a connection."""
type JobEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Job!
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
}

union LoginPayload = Account | InvalidCredentialsError

type Mutation {
  """Register a new user."""
  register(
    """The email of the new user."""
    email: String!

    """The password of the new user."""
    password: String!
  ): RegisterPayload!

  """Log in a user."""
  login(
    """The email of the user."""
    email: String!

    """The password of the user."""
    password: String!
  ): LoginPayload!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: ID!
}

type NotAuthenticatedError implements Error {
  message: String!
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Get the current user."""
  viewer: ViewerPayload!
  node(
    """The ID of the object."""
    id: ID!
  ): Node

  """Get all jobs available."""
  jobs(
    """Search term"""
    searchTerm: String = null
    before: ID = null
    after: ID = null
    first: Int = null
    last: Int = null
  ): JobConnection!
}

union RegisterPayload = Account | EmailInUseError

union ViewerPayload = Account | NotAuthenticatedError

enum WorkMode {
  REMOTE
  HYBRID
  OFFICE
}
